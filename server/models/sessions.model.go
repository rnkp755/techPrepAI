package models

import (
	"errors"
	"strings"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Enum for UserType
type UserType string

const (
	User  UserType = "user"
	Guest UserType = "guest"
)

type Project struct {
	Title       string   `json:"title" bson:"title"`
	TechStacks  []string `json:"techStacks" bson:"techStacks"`
	Description string   `json:"description" bson:"description"`
}

type AllowedInterviewStatus string

const (
	NotStarted         AllowedInterviewStatus = "not-started"
	WaitingForAnswer   AllowedInterviewStatus = "waiting-for-answer"
	Ended   AllowedInterviewStatus = "ended"
)

type Session struct {
	ID              primitive.ObjectID     `json:"_id,omitempty" bson:"_id,omitempty"`
	UserType        UserType               `json:"userType" bson:"userType"`
	UserID          primitive.ObjectID     `json:"userID,omitempty" bson:"userID,omitempty"`
	Name            string                 `json:"name,omitempty" bson:"name,omitempty"`
	Experience      string                 `json:"experience,omitempty" bson:"experience,omitempty"`
	TechStacks      []string               `json:"techStacks" bson:"techStacks"`
	Projects        []Project              `json:"projects,omitempty" bson:"projects,omitempty"`
	InterviewStatus AllowedInterviewStatus `json:"interviewstatus,omitempty" bson:"interviewstatus,omitempty"`
	HasExpired      bool                   `json:"hasExpired,omitempty" bson:"hasExpired,omitempty"`
	CreatedAt       time.Time              `json:"createdAt,omitempty" bson:"createdAt,omitempty"`
	UpdatedAt       time.Time              `json:"updatedAt,omitempty" bson:"updatedAt,omitempty"`
}

func (s *Session) ValidateAndInitialize() error {
	// Ensure ID is not passed by the user
	if !s.ID.IsZero() {
		return errors.New("ID should not be provided, it will be generated by the database")
	}

	// Set default experience
	if s.Experience == "" {
		s.Experience = "Fresher"
	}

	if s.UserType != User && s.UserType != Guest {
		return errors.New("userType should be either 'user' or 'guest'")

	}

	// Ensure UserID is present if UserType is user
	if s.UserType == User && s.UserID.IsZero() {
		return errors.New("userID must be provided when UserType is 'user'")
	}

	if s.UserType == Guest {
		s.UserID = primitive.NilObjectID
	}

	// Ensure Projects follows the schema
	for _, project := range s.Projects {
		if strings.TrimSpace(project.Title) == "" {
			return errors.New("Project title is required")
		}

		if len(project.TechStacks) == 0 {
			return errors.New("at least one tech stack is required for each project")
		}

		if strings.TrimSpace(project.Description) == "" {
			return errors.New("Project description is required")
		}

	}

	if s.InterviewStatus == "" {
		s.InterviewStatus = NotStarted
	} else if s.InterviewStatus != NotStarted && s.InterviewStatus != WaitingForAnswer && s.InterviewStatus != Ended {
		return errors.New("invalid interviewStatus")
	}

	// Set HasExpired to false initially
	s.HasExpired = false

	// Set createdAt if not already set
	if s.CreatedAt.IsZero() {
		s.CreatedAt = time.Now()
	}

	// Always set updatedAt to the current time
	s.UpdatedAt = time.Now()

	return nil
}
